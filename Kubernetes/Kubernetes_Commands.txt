# Commands Classification based on Purpose or Usage:-


1> Commands for Creating Objects (service-pod-replicationcontrollers-deployment)
2> Commands for Viewing or Finding Resources (service-pod-replicationcontrollers-deployment)
3> Commands for Updating Resources (service-pod-replicationcontrollers-deployment)
4> Commands for  Patching Resources (service-pod-replicationcontrollers-deployment)
5> Commands for Editing Resources (service-pod-replicationcontrollers-deployment)
6> Commands for Scaling Resources (service-pod-replicationcontrollers-deployment)
7> Deleting Resources (service-pod-replicationcontrollers-deployment)


# Creating Resources(service-pod-replicationcontrollers-deployment) using Yaml or Json file:-
$ kubectl create -f ./my-manifest.yaml                                                             # Create resource(s)
$ kubectl create -f ./my1.yaml -f ./my2.yaml                                                       # Create from multiple files
$ kubectl create -f ./dir                                                                          # Create resource(s) in all manifest files in dir
$ kubectl create -f https://git.io/vPieo                                                           # Create resource(s) from url
$ kubectl create namespace <namespace>                                                             # Create namespace
$ kubectl create –f Deployment.yaml -–record                                                       # Create deployment
$ kubectl run nginx --image=nginx                                                                  # Start a single instance of nginx


# Deleting Resources(service-pod-replicationcontrollers-deployment):-
$ kubectl delete -f ./pod.json                                                                     # Delete a pod using the type and name specified in pod.json
$ kubectl delete pod,service baz foo                                                               # Delete pods and services with same names "baz" and "foo"
$ kubectl delete pods,services -l name=myLabel                                                     # Delete pods and services with label name=myLabel
$ kubectl delete pods,services -l name=myLabel --include-uninitialized                             # Delete pods and services, including uninitialized ones, with label name=myLabel
$ kubectl -n my-ns delete po,svc --all                                                             # Delete all pods and services, including uninitialized ones, in namespace my-ns


# Interacting with Pods:-
$ kubectl get pods 	
$ kubectl top pods																												                                                                               # Metric of all pods
$ kubectl attach <pod> –c <container>																							                                                                 # Attach to container of pod																											# List all pods
$ kubectl get pods --all-namespaces             																				                                                         # List all pods in all namespaces
$ kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'														                                       # List pods Sorted by Restart Count
$ kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq	# List all Secrets currently in use by a pod
$ kubectl get pods --selector=app=cassandra rc -o  jsonpath='{.items[*].metadata.labels.version}'							                    	# Get the version label of all pods with label app=cassandra
$ kubectl get pods --field-selector=status.phase=Running																		                                                   # Get all running pods in the namespace
$ kubectl get pods --include-uninitialized  																					                                                            # List all pods in the namespace, including uninitialized ones
$ kubectl describe pods my-pod																									                                                                      # List all details of specified pod
$ kubectl explain pods		                	  																				                                                              # get the documentation for pod manifests
$ kubectl get pods -o wide                  																					                                                            # List all pods in the namespace, with more details
$ kubectl label pods my-pod new-label=awesome                      															                                          	# Add a Label to pod
$ kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       																                                          # Add an annotation to pod
$ kubectl get pod mypod -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -									                      # Update a single-container pod's image version (tag) from v1 to v4
$ kubectl replace --force -f ./pod.json																						                                                               	# Force will replace, delete and then re-create the resource i.e. pod here file is 'pod.json'      # Will cause a service outage.
$ cat pod.json | kubectl replace -f -                              															                                          	# Replace a pod based on the JSON passed into stdin
$ sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')%?} | $ echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})		# List Names of Pods that belong to Particular RC | # "jq" command useful for transformations that are too complex for jsonpath, it can be found at https://stedolan.github.io/jq/


# Interacting with running Pods:-
$ kubectl logs my-pod                                                                               # dump pod logs (stdout)
$ kubectl logs my-pod -c my-container                                                               # dump pod container logs (stdout, multi-container case)
$ kubectl logs -f my-pod                                                                            # stream pod logs (stdout)
$ kubectl logs -f my-pod -c my-container                                                            # stream pod container logs (stdout, multi-container case)
$ kubectl run -i --tty busybox --image=busybox -- sh                                                # Run pod as interactive shell
$ kubectl attach my-pod -i                                                                          # Attach to Running Container
$ kubectl port-forward my-pod 5000:6000                                                             # Listen on port 5000 on the local machine and forward to port 6000 on my-pod
$ kubectl exec my-pod -- ls /                                                                       # Run command in existing pod (1 container case)
$ kubectl exec my-pod -c my-container -- ls /                                                       # Run command in existing pod (multi-container case)
$ kubectl top pod POD_NAME --containers                                                             # Show metrics for a given pod and its containers


# Interacting with Services:-
$ kubectl get services                                                                              # List all services in the namespace
$ kubectl get services --sort-by=.metadata.name                                                     # List Services Sorted by Name
$ kubectl expose rc nginx --port=80 --target-port=8000                                              # Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
$ kubectl explain svc                                                                               # Get the documentation for svc manifests
$ kubectl exec <service> <command> [-c <container>]                                                 # Execute command on container of service


# Interacting with ReplicationController:-
$ kubectl get rc                                                                                    # List all ReplicationController
$ kubectl get rc --namespace="<namespace>"                                                          # List a particular ReplicationController
$ kubectl describe rc <name>                                                                        # Describe ReplicationController
$ kubectl explain rc                                                                                # Get the documentation for ReplicationController


# Interacting with Deployment:-
$ kubectl get deployment                                                                            # List all deployment
$ kubectl get deployment my-dep                                                                     # List a particular deployment
$ kubectl autoscale deployment foo --min=2 --max=10                                                 # Auto scale a deployment "foo"
$ kubectl set image deployment/Deployment tomcat=tomcat:6.0                                         # Update deployment
$ kubectl rollout status deployment/Deployment                                                      # Status of deployement
$ kubectl rollout undo deployment/Deployment –to-revision=2                                         # Rollback to previous version of deployment


# Interacting with Nodes:-
$ kubectl get nodes																																								                                                                                                                   # List all node
$ kubectl get nodes	-want																																					                                                                                                                # Watch node continuously																
$ kubectl top nodes																																								                                                                                                                   # Metric of all nodes
$ kubectl drain tomcat –force                                                                                                                                                 # Drain a node for maintenance purpose
$ kubectl describe nodes my-node																														                                                                                                                # List all details of specified node i.e. verbose
$ kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'																					                                                          # Get ExternalIPs of all nodes
$ JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}' && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"	# Check which nodes are ready

 
# Interacting with Nodes and Cluster:-
$ kubectl cordon my-node                                                                           # Mark my-node as unschedulable
$ kubectl drain my-node                                                                            # Drain my-node in preparation for maintenance
$ kubectl uncordon my-node                                                                         # Mark my-node as schedulable
$ kubectl top node my-node                                                                         # Show metrics for a given node
$ kubectl cluster-info                                                                             # Display addresses of the master and services
$ kubectl cluster-info dump                                                                        # Dump current cluster state to stdout
$ kubectl cluster-info dump --output-directory=/path/to/cluster-state                              # Dump current cluster state to /path/to/cluster-state
$ kubectl taint nodes foo dedicated=special-user:NoSchedule                                        # Allow master to run pod. If a taint with that key and effect already exists, its value is replaced as specified.


# Interacting with Events:-
$ kubectl get events                                                                               # List all events
$ kubectl get events --sort-by=.metadata.creationTimestamp                                         # List Events sorted by timestamp


# Updating Resources:-
$ kubectl rolling-update frontend-v1 -f frontend-v2.json                                           # Rolling update pods of frontend-v1
$ kubectl rolling-update frontend-v1 frontend-v2 --image=image:v2                                  # Change the name of the resource and update the image
$ kubectl rolling-update frontend --image=image:v2                                                 # Update the pods image of frontend
$ kubectl rolling-update frontend-v1 frontend-v2 --rollback                                        # Abort existing rollout in progress


# Scaling Resources:-
$ kubectl scale --replicas=3 rc <name>                                                              # Scale ReplicationController 
$ kubectl scale --replicas=3 rs/foo                                                                 # Scale a replicaset named 'foo' to 3
$ kubectl scale --replicas=3 -f foo.yaml                                                            # Scale a resource specified in "foo.yaml" to 3
$ kubectl scale --current-replicas=2 --replicas=3 deployment/mysql                                  # If the deployment named mysql's current size is 2, scale mysql to 3
$ kubectl scale --replicas=5 rc/foo rc/bar rc/baz                                                   # Scale multiple replication controllers


# Patching Resources:-
$ kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}' 																			                                                     # Partially update a node
$ kubectl patch pod valid-pod -p '{"spec":{"containers":[{"name":"kubernetes-serve-hostname","image":"new image"}]}}'							                 # Update a container's image; spec.containers[*].name is required because it's a merge key
$ kubectl patch pod valid-pod --type='json' -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"new image"}]'					           # Update a container's image using a json patch with positional arrays
$ kubectl patch deployment valid-deployment  --type json   -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/livenessProbe"}]'	# Disable a deployment livenessProbe using a json patch with positional arrays
$ kubectl patch sa default --type='json' -p='[{"op": "add", "path": "/secrets/1", "value": {"name": "whatever" } }]'						                  	# Add a new element to a positional array 


# Viewing Logs:-
$ kubectl logs pod
$ kubectl logs --tail=1 pod
$ kubectl logs --tail=1 pod
$ kubectl logs --since=24h pod
$ kubectl logs -f pod
$ kubectl logs -f <svc-name> [-c <$container>]
watch -n 2 cat /var/log/kubelet.log


# Kubeadm Commands:-
$ kubeadm init
$ kubeadm join
$ kubeadm upgrade
$ kubeadm config
$ kubeadm reset
$ kubeadm token
$ kubeadm version
$ kubeadm alpha


# Kubefed Commands:-
$ kubefed
$ kubefed
$ kubefed options
$ kubefed init
$ kubefed join
$ kubefed unjoin
$ kubefed version


# Kubelet Commands:-
$ kubelet
$ Kubelet authentication/authorization
$ kube-apiserver
$ kube-controller-manager
$ kube-proxy
$ kube-scheduler


# Kubectl Commands:-
$ kubectl
$ kubectl version
$ kubectl api-version
$ kubectl cluster-info
$ kubectl cluster-info dump
$ kubectl cluster-info dump --output-directory = /path/to/cluster-state
$ kubectl conf g view
$ kubectl Cheat Sheet
$ kubectl Commands
$ kubectl Usage Conventions
$ kubectl for Docker Users
$ Kubectl Autocomplete
$ Kubectl Context and Configuration

# Kubectl Autocomplete:-
$ source <(kubectl completion bash)                                                                      # setup autocomplete in bash, bash-completion package should be installed first.
$ source <(kubectl completion zsh)                                                                       # setup autocomplete in zsh
# Kubectl Context and Configuration:-
$ kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'                           # Get the password for the e2e user
$ kubectl config set-credentials kubeuser/foo.kubernetes.com --username=kubeuser --password=kubepassword # Add a new cluster to your kubeconf that supports basic auth
$ kubectl config set-context gce --user=cluster-admin --namespace=foo && kubectl config use-context gce  # Set a context utilizing a specific username and namespace.
$ kubectl config set PROPERTY_NAME PROPERTY_VALUE                                                        # Sets an individual value in kubeconfig file
$ kubectl config unset PROPERTY_NAME PROPERTY_VALUE                                                      # Unsets a specific component in kubectl.
$ kubectl config use-context <Context Name>                                                              # Sets the current context in kubectl file.
$ kubectl config current-context                                                                         # Display the current-context
$ kubectl config use-context my-cluster-name                                                             # set the default context to my-cluster-name
$ kubectl config view                                                                                    # Show Merged kubeconfig settings.
$ KUBECONFIG=~/.kube/config:~/.kube/kubconfig2 kubectl config view                                       # Use multiple kubeconfig files at the same time and view merged config
$ kubectl edit <Resource/Name | File Name)                                                               # Directly edit a resource which one can receive via the command line tool.
$ kubectl edit svc/docker-registry                                                                       # Edit the service named docker-registry
$ KUBE_EDITOR="nano" kubectl edit svc/docker-registry                                                    # Use an alternative editor
$ kubectl cp <Files from source> <Files to Destination>                                                  # Copy files and directories to and from containers.
$ kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container>                                        # Copy files and directories to and from containers.

# Short-Hand Notation or Abbreviated alias
certificatesigningrequests        csr
componentstatuses                 cs
configmaps                        cm
customresourcedefinition          crd, crds
daemonsets                        ds
deployments                       deploy
endpoints                         ep
events                            ev
horizontalpodautoscalers          hpa
ingresses                         ing
limitranges                       limits
namespaces                        ns
networkpolicies                   netpol
nodes                             no
persistentvolumeclaims            pvc
persistentvolumes                 pv
poddisruptionbudgets              pdb	
pods                              po
podsecuritypolicies               psp
replicasets                       rs
replicationcontrollers            rc
resourcequotas                    quota
serviceaccount                    sa
services                          svc
statefulsets                      sts
storageclasses                    sc


# Formatting output
To output details to your terminal window in a specific format, you can add either the -o or -output flags to a supported kubectl command.


# Output format	Description
-o=custom-columns=<spec>                                                                                 Print a table using a comma separated list of custom columns
-o=custom-columns-file=<filename>                                                                        Print a table using the custom columns template in the <filename> file
-o=json                                                                                                  Output a JSON formatted API object
-o=jsonpath=<template>                                                                                   Print the fields defined in a jsonpath expression
-o=jsonpath-file=<filename>                                                                              Print the fields defined by the jsonpath expression in the <filename> file
-o=name                                                                                                  Print only the resource name and nothing else
-o=wide                                                                                                  Output in the plain-text format with any additional information, and for pods, the node name is included
-o=yaml                                                                                                  Output a YAML formatted API object
Kubectl	-v or --v                                                                                        Output verbosity and debugging


# Verbosity	Description
# Kubectl verbosity is controlled with the -v or --v flags followed by an integer representing the log level. General Kubernetes logging conventions and the associated log levels are described here.
--v=0                                                                                                    Generally useful for this to ALWAYS be visible to an operator.
--v=1                                                                                                    A reasonable default log level if you don’t want verbosity.
--v=2                                                                                                    Useful steady state information about the service and important log messages that may correlate to significant changes in the system. This is the recommended default log level for most systems.
--v=3                                                                                                    Extended information about changes.
--v=4                                                                                                    Debug level verbosity.
--v=6                                                                                                    Display requested resources.
--v=7                                                                                                    Display HTTP request headers.
--v=8                                                                                                    Display HTTP request contents.
--v=9                                                                                                    Display HTTP request contents without truncation of contents.
